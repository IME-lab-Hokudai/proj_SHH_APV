############################################################################
# Copyright (c) 2015-24, NVIDIA CORPORATION. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of NVIDIA CORPORATION nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
###########################################################################

# Load FBX
sceneBuilder.importScene('Arcade.fbx')

# # Adjust emissive screen
m = sceneBuilder.getMaterial('Cabinet')
m.emissiveFactor = 150.0

bunny = StandardMaterial('Bunny')
#bunny.baseColor = float4(0.6, 0.8, 1.0, 1.0)
bunny.baseColor = float4(0.5, 0.5, 0.5, 1.0)
bunny.roughness = 1.0

# Add environment map
envMap = EnvMap('20050806-03_hd.hdr')
#envMap = EnvMap('grace_probe_latlong.hdr')
envMap.intensity = 1.0
sceneBuilder.envMap = envMap

#sphereMesh = TriangleMesh.createFromFile('meshes/bunny_dense.obj', smoothNormals=True)
sphereMesh = TriangleMesh.createSphere()
sphereNodeID = sceneBuilder.addNode('Sphere', Transform(translation=float3(0.0, 0.2, 0), rotationEuler=float3(0, 0, 0), scaling=0.2))
sceneBuilder.addMeshInstance(
    sphereNodeID,
    sceneBuilder.addTriangleMesh(sphereMesh, bunny)
)

anim = Animation('sphereAnim',sphereNodeID,16.0)
anim.addKeyframe(0.0, Transform(translation=float3(-2.0, 0.5, 0), scaling=0.5))
anim.addKeyframe(4.0, Transform(translation=float3(0.4, 0.5, 0), scaling=0.5))
anim.addKeyframe(8.0, Transform(translation=float3(0.4, 0.5, 1.5), scaling=0.5))
anim.addKeyframe(12.0, Transform(translation=float3(-2.0, 0.5, 1.5), scaling=0.5))
anim.addKeyframe(16.0, Transform(translation=float3(-2.0, 0.5, 0), scaling=0.5))
sceneBuilder.addAnimation(anim)

# Add camera
camera = Camera()
camera.position = float3(-1.143306016921997, 1.8430896997451783, 2.4423341751098635)
camera.target = float3(-0.7014234066009522, 1.4863656759262086, 1.6192376613616944)
camera.up = float3(-0.3762371838092804, 0.6345208287239075, 0.6751033663749695)
camera.focalLength = 21.0
#camera.nearPlane = 0.1
camera.farPlane = 50
sceneBuilder.addCamera(camera)

# Add directional light
dirLight = DirectionalLight('Directional light')
dirLight.intensity = float3(1.0, 1.0, 1.0)
dirLight.direction = float3(0.6245101094245911, -0.7170000076293945, -0.3096744418144226)
sceneBuilder.addLight(dirLight)

# Add point light
#pointLight = PointLight('Point light')
#pointLight.intensity = float3(0.9, 2.4, 3.0)
#pointLight.position = float3(-2.8681933879852297, 2.0, 2.9874155521392824)
#sceneBuilder.addLight(pointLight)
