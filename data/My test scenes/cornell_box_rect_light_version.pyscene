############################################################################
# Copyright (c) 2015-24, NVIDIA CORPORATION. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of NVIDIA CORPORATION nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
###########################################################################

# Create materials

light = StandardMaterial('Light')
light.emissiveColor = float3(1, 1, 1)
light.emissiveFactor = 0.5

floor = StandardMaterial('Floor')
floor.baseColor = float4(0.725, 0.71, 0.68, 1.0)
floor.roughness = 0.5

backWall = StandardMaterial('Back Wall')
backWall.baseColor = float4(0.725, 0.71, 0.68, 1.0)
backWall.roughness = 0.5

ceiling = StandardMaterial('Ceiling')
ceiling.baseColor = float4(0.725, 0.71, 0.68, 1.0)
ceiling.roughness = 0.5

leftWall = StandardMaterial('Left Wall')
leftWall.baseColor = float4(0.63, 0.065, 0.05, 1.0)
leftWall.roughness = 0.5

rightWall = StandardMaterial('Right Wall')
rightWall.baseColor = float4(0.14, 0.45, 0.091, 1.0)
rightWall.roughness = 0.5

largeBox = StandardMaterial('Large Box')
largeBox.baseColor = float4(0.725, 0.71, 0.68, 1.0)
largeBox.roughness = 0.5

smallBox = StandardMaterial('Small Box')
smallBox.baseColor = float4(0.725, 0.71, 0.68, 1.0)
smallBox.roughness = 0.5

# Create geometry

quadMesh = TriangleMesh.createQuad()
cubeMesh = TriangleMesh.createCube()

# Create mesh instances

sceneBuilder.addMeshInstance(
    sceneBuilder.addNode('Floor', Transform(scaling=float3(0.55, 1.0, 0.56))),
    sceneBuilder.addTriangleMesh(quadMesh, floor)
)

sceneBuilder.addMeshInstance(
    sceneBuilder.addNode('Ceiling', Transform(scaling=float3(0.55, 1.0, 0.56), translation=float3(0, 0.55, 0), rotationEulerDeg=float3(180, 0, 0))),
    sceneBuilder.addTriangleMesh(quadMesh, ceiling)
)

sceneBuilder.addMeshInstance(
    sceneBuilder.addNode('Back Wall', Transform(scaling=float3(0.55, 1.0, 0.56), translation=float3(0, 0.275, -0.275), rotationEulerDeg=float3(90, 0, 0))),
    sceneBuilder.addTriangleMesh(quadMesh, backWall)
)

sceneBuilder.addMeshInstance(
    sceneBuilder.addNode('Left Wall', Transform(scaling=float3(0.55, 1.0, 0.56), translation=float3(-0.275, 0.275, 0), rotationEulerDeg=float3(0, 0, -90))),
    sceneBuilder.addTriangleMesh(quadMesh, leftWall)
)

sceneBuilder.addMeshInstance(
    sceneBuilder.addNode('Right Wall', Transform(scaling=float3(0.55, 1.0, 0.56), translation=float3(0.275, 0.275, 0), rotationEulerDeg=float3(0, 0, 90))),
    sceneBuilder.addTriangleMesh(quadMesh, rightWall)
)

sceneBuilder.addMeshInstance(
    sceneBuilder.addNode('Large Box', Transform(scaling=float3(0.165, 0.33, 0.165), translation=float3(-0.093, 0.165, -0.071), rotationEuler=float3(0, -1.27, 0))),
    sceneBuilder.addTriangleMesh(cubeMesh, largeBox)
)

sceneBuilder.addMeshInstance(
    sceneBuilder.addNode('Small Box', Transform(scaling=float3(0.165, 0.165, 0.165), translation=float3(0.09, 0.0825, 0.111), rotationEuler=float3(0, -0.29, 0))),
    sceneBuilder.addTriangleMesh(cubeMesh, smallBox)
)

lightMeshID = sceneBuilder.addTriangleMesh(quadMesh, light, isAnimated=True)
lightNodeID = sceneBuilder.addNode('Light', Transform(scaling=0.2, translation=float3(0, 0.549, 0), rotationEulerDeg=float3(180, 0, 0)))
sceneBuilder.addMeshInstance(lightNodeID, lightMeshID)

# Create camera
camera = Camera()
camera.position = float3(0, 0.28, 1.2)
camera.target = float3(0, 0.28, 0)
camera.up = float3(0, 1, 0)
camera.focalLength = 35.0
sceneBuilder.addCamera(camera)

# Add rect light
rectLight = RectLight('Rectangular Area light')
rectLight.intensity = float3(1.0, 1.0, 1.0)
rectLight.scaling = float3(0.1, 0.1, 0.1)
rectLight.translation = float3(0.0, 0.548, 0.0)
rectLight.rotationEulerDeg = float3(180.0, 0.0, 0.0)
rectLight.nodeID = lightNodeID
rectLight.meshID = lightMeshID
sceneBuilder.addLight(rectLight)